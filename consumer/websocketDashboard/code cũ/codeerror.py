from fastapi import WebSocket, FastAPI, WebSocketDisconnect
import asyncio
import time
from kafka import KafkaConsumer
import json
from datetime import datetime, time as dtime, date
from typing import Optional
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Danh s√°ch ng√†y ngh·ªâ l·ªÖ (c√≥ th·ªÉ m·ªü r·ªông th√™m)
holiday = [
    date(2025, 1, 1),   # T·∫øt D∆∞∆°ng l·ªãch
    date(2025, 4, 30),  # 30/4
    date(2025, 5, 1),   # Qu·ªëc t·∫ø lao ƒë·ªông
    date(2025, 9, 2),   # Qu·ªëc kh√°nh
    # Th√™m c√°c ng√†y l·ªÖ kh√°c...
]

def is_trading_time():
    """Ki·ªÉm tra c√≥ ƒëang trong gi·ªù giao d·ªãch hay kh√¥ng"""
    now = datetime.now()
    today = now.date()
    
    # Ki·ªÉm tra cu·ªëi tu·∫ßn v√† ng√†y l·ªÖ
    if now.weekday() >= 5 or today in holiday:
        return False
    
    # ƒê·ªãnh nghƒ©a c√°c khung gi·ªù giao d·ªãch
    morning_start = dtime(9, 0)
    morning_end = dtime(11, 30)
    afternoon_start = dtime(13, 0)
    afternoon_end = dtime(15, 0)
    
    current_time = now.time()
    
    # Ki·ªÉm tra trong khung gi·ªù giao d·ªãch
    return (morning_start <= current_time <= morning_end) or \
           (afternoon_start <= current_time <= afternoon_end)

def create_kafka_consumer(topic: str) -> KafkaConsumer:
    """T·∫°o Kafka consumer v·ªõi error handling"""
    try:
        consumer = KafkaConsumer(
            topic,
            bootstrap_servers=['172.20.0.3:9092'],
            value_deserializer=lambda m: json.loads(m.decode('utf-8')),
            auto_offset_reset='earliest',  # T·∫°m th·ªùi ƒë·ªïi th√†nh earliest ƒë·ªÉ test
            group_id='websocket_consumer_group',  # Th√™m group_id ƒë·ªÉ tr√°nh duplicate messages
            enable_auto_commit=True,
            auto_commit_interval_ms=1000,
            consumer_timeout_ms=1000,
            max_poll_records=10,  # Gi·ªõi h·∫°n s·ªë records m·ªói l·∫ßn poll
            # Th√™m config ƒë·ªÉ force s·ª≠ d·ª•ng ƒë√∫ng broker
            api_version=(2, 0, 1),
            connections_max_idle_ms=540000,
            request_timeout_ms=40000,
            # WORKAROUND: Force client to ignore broker metadata
            security_protocol='PLAINTEXT',
            metadata_max_age_ms=30000,
        )
        
        # Ki·ªÉm tra connection tr∆∞·ªõc khi return
        partitions = consumer.partitions_for_topic(topic)
        if partitions is None:
            raise Exception(f"Topic '{topic}' kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng accessible")
            
        logger.info(f"‚úÖ Kafka consumer ƒë√£ ƒë∆∞·ª£c t·∫°o cho topic: {topic} v·ªõi {len(partitions)} partitions")
        return consumer
    except Exception as e:
        logger.error(f"‚ùå L·ªói t·∫°o Kafka consumer: {e}")
        raise

def get_kafka_messages(consumer: KafkaConsumer) -> list:
    """L·∫•y t·∫•t c·∫£ messages t·ª´ Kafka (non-blocking)"""
    try:
        msg_pack = consumer.poll(timeout_ms=100)  # Gi·∫£m timeout ƒë·ªÉ responsive h∆°n
        messages = []
        
        for topic_partition, records in msg_pack.items():
            for record in records:
                messages.append({
                    'data': record.value,
                    'offset': record.offset,
                    'partition': record.partition,
                    'timestamp': record.timestamp
                })
        
        return messages
    except Exception as e:
        logger.error(f"‚ùå L·ªói ƒë·ªçc Kafka message: {e}")
        return []

app = FastAPI(title="Kafka WebSocket Service", version="1.0.0")

# Bi·∫øn global ƒë·ªÉ theo d√µi connections
active_connections = set()

@app.get("/")
async def root():
    return {
        "message": "Kafka WebSocket Service ƒëang ho·∫°t ƒë·ªông",
        "endpoints": {
            "websocket": "/ws/eboard_table",
            "health": "/health"
        }
    }

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "trading_time": is_trading_time(),
        "active_connections": len(active_connections),
        "timestamp": datetime.now().isoformat()
    }

@app.websocket("/ws/eboard_table")
async def websocket_eboard_table(websocket: WebSocket):
    await websocket.accept()
    active_connections.add(websocket)
    consumer = None
    
    try:
        logger.info("üîå Client m·ªõi k·∫øt n·ªëi WebSocket")
        
        # G·ª≠i th√¥ng b√°o k·∫øt n·ªëi th√†nh c√¥ng
        await websocket.send_json({
            "status": "connected",
            "message": "K·∫øt n·ªëi th√†nh c√¥ng v·ªõi WebSocket. Vui l√≤ng nh·∫≠p keyword x√°c th·ª±c!",
            "timestamp": datetime.now().isoformat()
        })
        
        # Nh·∫≠n keyword x√°c th·ª±c
        try:
            msg = await asyncio.wait_for(websocket.receive_text(), timeout=30.0)
        except asyncio.TimeoutError:
            await websocket.send_json({
                "status": "timeout",
                "message": "Timeout - kh√¥ng nh·∫≠n ƒë∆∞·ª£c keyword trong 30 gi√¢y"
            })
            return
        
        # X√°c th·ª±c keyword
        if msg.strip() != 'VNSFintech':
            await websocket.send_json({
                "status": "unauthorized", 
                "message": "M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá"
            })
            return
        
        logger.info("‚úÖ Client ƒë√£ x√°c th·ª±c th√†nh c√¥ng")
        await websocket.send_json({
            "status": "authenticated",
            "message": "X√°c th·ª±c th√†nh c√¥ng. ƒêang kh·ªüi t·∫°o k·∫øt n·ªëi Kafka...",
            "timestamp": datetime.now().isoformat()
        })
        
        # T·∫°o Kafka consumer
        try:
            logger.info("üîÑ ƒêang kh·ªüi t·∫°o Kafka consumer...")
            consumer = create_kafka_consumer("eboard_table")
            logger.info("‚úÖ Kafka consumer ƒë√£ s·∫µn s√†ng")
        except Exception as e:
            error_msg = f"L·ªói k·∫øt n·ªëi Kafka: {str(e)}"
            logger.error(f"‚ùå {error_msg}")
            await websocket.send_json({
                "status": "error",
                "message": error_msg,
                "debug_info": "Ki·ªÉm tra Kafka broker config: advertised.listeners ph·∫£i l√† 172.20.0.3:9092"
            })
            return
        
        await websocket.send_json({
            "status": "ready",
            "message": "ƒê√£ s·∫µn s√†ng nh·∫≠n d·ªØ li·ªáu t·ª´ Kafka",
            "timestamp": datetime.now().isoformat()
        })
        
        # V√≤ng l·∫∑p ch√≠nh ƒë·ªÉ ƒë·ªçc v√† g·ª≠i d·ªØ li·ªáu
        consecutive_no_data = 0
        while True:
            try:
                # T√çNH NƒÇNG GI·ªú GIAO D·ªäCH T·∫†M TH·ªúI T·∫ÆT ƒê·ªÇ TEST
                # if not is_trading_time():
                #     if consecutive_no_data == 0:  # Ch·ªâ g·ª≠i th√¥ng b√°o l·∫ßn ƒë·∫ßu
                #         await websocket.send_json({
                #             "status": "no_trading",
                #             "message": "Ngo√†i gi·ªù giao d·ªãch - t·∫°m d·ª´ng nh·∫≠n d·ªØ li·ªáu",
                #             "timestamp": datetime.now().isoformat(),
                #             "next_trading_session": "09:00 - 11:30 v√† 13:00 - 15:00"
                #         })
                #     await asyncio.sleep(30)  # Ki·ªÉm tra l·∫°i sau 30 gi√¢y
                #     consecutive_no_data += 1
                #     continue
                
                # Reset counter khi v√†o gi·ªù giao d·ªãch
                consecutive_no_data = 0
                
                # L·∫•y d·ªØ li·ªáu t·ª´ Kafka (ch·∫°y trong thread pool)
                messages = await asyncio.get_event_loop().run_in_executor(
                    None, lambda: get_kafka_messages(consumer)
                )
                
                if messages:
                    # G·ª≠i t·ª´ng message
                    for msg in messages:
                        await websocket.send_json({
                            "status": "data",
                            "payload": msg['data'],
                            "kafka_info": {
                                "offset": msg['offset'],
                                "partition": msg['partition'],
                                "kafka_timestamp": msg['timestamp']
                            },
                            "timestamp": datetime.now().isoformat()
                        })
                    
                    logger.info(f"üì§ ƒê√£ g·ª≠i {len(messages)} messages ƒë·∫øn client")
                else:
                    # Kh√¥ng c√≥ d·ªØ li·ªáu m·ªõi, sleep ng·∫Øn
                    await asyncio.sleep(0.1)
                    
            except WebSocketDisconnect:
                logger.info("üîå Client ƒë√£ ng·∫Øt k·∫øt n·ªëi")
                break
            except Exception as e:
                logger.error(f"‚ùå L·ªói trong v√≤ng l·∫∑p ch√≠nh: {e}")
                await websocket.send_json({
                    "status": "error",
                    "message": f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}",
                    "timestamp": datetime.now().isoformat()
                })
                await asyncio.sleep(1)
                
    except WebSocketDisconnect:
        logger.info("üîå WebSocket ƒë√£ b·ªã ng·∫Øt k·∫øt n·ªëi")
    except Exception as e:
        logger.error(f"‚ùå L·ªói WebSocket kh√¥ng mong mu·ªën: {e}")
        try:
            await websocket.send_json({
                "status": "fatal_error",
                "message": f"L·ªói nghi√™m tr·ªçng: {str(e)}",
                "timestamp": datetime.now().isoformat()
            })
        except:
            pass
    finally:
        # Cleanup
        active_connections.discard(websocket)
        if consumer:
            try:
                consumer.close()
                logger.info("üîí ƒê√£ ƒë√≥ng Kafka consumer")
            except Exception as e:
                logger.error(f"‚ùå L·ªói ƒë√≥ng Kafka consumer: {e}")

# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(
#         "main:app", 
#         host="0.0.0.0", 
#         port=8000, 
#         reload=True,
#         log_level="info"
#     )